{"version":3,"file":"lottieAnimationView.component.js","sourceRoot":"","sources":["../../../src/lottieAnimationView.component.ts"],"names":[],"mappings":"OAAO,EAAE,SAAS,EAAE,KAAK,EAAU,MAAM,EAAE,YAAY,EAAE,SAAS,EAAc,MAAM,eAAe;AAErG,IAAM,SAAS,GAAQ,OAAO,CAAC,qCAAqC,CAAC,CAAC;AAItE;IAAA;QAKK,gBAAW,GAAQ,IAAI,YAAY,EAAE,CAAC;IA0C3C,CAAC;IAlCG,+CAAQ,GAAR;QACI,IAAI,CAAC,QAAQ,GAAG;YACZ,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,aAAa;YAC1C,QAAQ,EAAE,KAAK;YACf,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,KAAK;YACjC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,KAAK;YACzC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa;YACzC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE;SAChC,CAAC;QAEF,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,MAAM,CAAC;QAC7C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,IAAI,MAAM,CAAC;QAE/C,IAAI,IAAI,GAAQ,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IACE,uCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACtB,QAAQ,EAAE,uBAAuB;oBACjC,QAAQ,EAAE,wKAEQ;iBACrB,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,2CAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,2CAAc,GAA2C;QAChE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC7B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC3B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC5B,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;QAClC,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,cAAc,EAAG,EAAE,EAAE;KAC/D,CAAC;IACF,mCAAC;AAAD,CAAC,AA/CD,IA+CC","sourcesContent":["import { Component, Input, OnInit, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';\ndeclare let require: any;\nconst bodymovin: any = require('bodymovin/build/player/bodymovin.js');\n\n\n\nexport class LottieAnimationViewComponent implements OnInit {\n     options: any;\n     width: number;\n     height: number;\n\n     animCreated: any = new EventEmitter();\n\n     lavContainer: ElementRef;\n\n    public viewWidth: string;\n    public viewHeight: string;\n    private _options: any;\n\n    ngOnInit() {\n        this._options = {\n            container: this.lavContainer.nativeElement,\n            renderer: 'svg',\n            loop: this.options.loop !== false,\n            autoplay: this.options.autoplay !== false,\n            animationData: this.options.animationData,\n            path: this.options.path || ''\n        };\n\n        this.viewWidth = this.width + 'px' || '100%';\n        this.viewHeight = this.height + 'px' || '100%';\n\n        let anim: any = bodymovin.loadAnimation(this._options);\n        this.animCreated.emit(anim);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'lottie-animation-view',\n    template: `<div #lavContainer \n                    [ngStyle]=\"{'width': viewWidth, 'height': viewHeight, 'overflow':'hidden', 'margin': '0 auto'}\">    \n               </div>`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input },],\n'width': [{ type: Input },],\n'height': [{ type: Input },],\n'animCreated': [{ type: Output },],\n'lavContainer': [{ type: ViewChild, args: ['lavContainer', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}